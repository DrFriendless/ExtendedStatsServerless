service: downloader

plugins:
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-southeast-2
  timeout: 30
  memorySize: 128

custom:
  secret: ${file(../secrets.json)}

functions:
  processUserList:
    handler: functions.processUserList
    tags:
      component: downloader
    environment:
      USERS_FILE: ${self:custom.secret.usersFile}
      downloaderPassword: ${self:custom.secret.downloaderPassword}
    role:
      "invokeLambdas"
    events:
      - schedule:
          name: lookForNewUsers
          description: every hour, look to see if new users have been added
          rate: rate(60 minutes)
          enabled: true
          input:
            stageParams:
              stage: dev
  processMetadata:
    handler: functions.processMetadata
    tags:
      component: downloader
    environment:
      METADATA_FILE: ${self:custom.secret.metadataFile}
      downloaderPassword: ${self:custom.secret.downloaderPassword}
    role:
      "invokeLambdas"
    events:
      - schedule:
          name: processMetadata
          description: every day, update metadata
          rate: rate(24 hours)
          enabled: true
          input:
            stageParams:
              stage: dev
  fireFileProcessing:
    handler: functions.fireFileProcessing
    tags:
      component: downloader
    environment:
      COUNT: ${self:custom.secret.filesPerMinute}
    role:
      "invokeLambdas"
    events:
      - schedule:
          name: processFiles
          description: every minute, look to see if there are files to process
          rate: rate(1 minute)
          enabled: true
          input:
            stageParams:
              stage: dev
  processUser:
    handler: functions.processUser
    tags:
      component: downloader
    environment:
      downloaderPassword: ${self:custom.secret.downloaderPassword}
    role:
      "invokeLambdas"
  processGame:
    handler: functions.processGame
    tags:
      component: downloader
    environment:
      downloaderPassword: ${self:custom.secret.downloaderPassword}
    role:
      "invokeLambdas"
  processPlayed:
    handler: functions.processPlayed
    tags:
      component: downloader
    environment:
      downloaderPassword: ${self:custom.secret.downloaderPassword}
    role:
      "invokeLambdas"
  processPlays:
    handler: functions.processPlays
    tags:
      component: downloader
    role:
      "invokeLambdas"
  processCollection:
    handler: functions.processCollection
    tags:
      component: downloader
    environment:
      downloaderPassword: ${self:custom.secret.downloaderPassword}
    timeout: 300
    memorySize: 256
    role:
      "invokeLambdas"
  processBGGTop50:
    handler: functions.processBGGTop50
    tags:
      component: downloader
    role:
      "invokeLambdas"

resources:
  Resources:
    invokeLambdas:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: invokeLambdasPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      - - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                  Resource: "*"

