// code to deal with the configuration secrets which are stored on S3

import {S3, AWSError} from 'aws-sdk';

export type Configuration = { [key: string]: string };
export type ConfigurationConsumer = (o: Configuration) => void;
export type ConfigurationProducer = (consumer: ConfigurationConsumer) => void;

export const getConfig: ConfigurationProducer = (callback: ConfigurationConsumer) => {
    const s3 = new S3({ apiVersion: '2006-03-01' });
    const params = {
        Bucket: "extended-stats-aws",
        Key: "config.txt"
    };
    console.log(params);
    s3.getObject(params, (err: AWSError, data: S3.Types.GetObjectOutput) => {
        console.log(err);
        console.log(data);
        if (err) {
            console.log(err);
            console.log("Unable to read config file.");
            callback({});
        } else {
            const s = data.Body ? data.Body.toString() : "";
            const re = /[\r\n]+/;
            const lines = s.split(re);
            const result = {};
            lines.forEach(line => {
                const fields = line.trim().split("=");
                if (fields.length === 2) {
                    result[fields[0].trim()] = fields[1].trim();
                }
            });
            console.log(result);
            callback(result);
        }
    });
};

function assemble(callback: Callback): GetProcessor {
    return (response: IncomingMessage) => {
        const data: Buffer[] = [];
        response.on('error', (err: Error) => {
            console.log("got error in assemble");
            return callback(err);
        });
        response.on('data', (chunk: Buffer) => {
            data.push(chunk);
        });
        response.on('end', () => {
            callback(null, Buffer.concat(data));
        });
    }
}

function assembleJson(callback: Callback): GetProcessor {
    return assemble((error?: Error | null, result?: object) => {
        if (error) {
            callback(error)
        } else {
            callback(null, JSON.parse(result.toString()));
        }
    });
}

