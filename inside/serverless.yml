service: inside

plugins:
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  timeout: 30
  memorySize: 128
  region: ap-southeast-2
  vpc:
    securityGroupIds:
      - sg-4d4b742b
    subnetIds:
      - subnet-44646e1d
      - subnet-a865decf
      - subnet-f565d0bc

custom:
  secret: ${file(../secrets.json)}
  database: ${file(../database.json)}

functions:
  updateUserList:
    handler: functions.updateUserList
    tags:
      component: inside
    timeout: 120
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
        "doStuffFromInsideVPC"
  updateMetadata:
    handler: functions.updateMetadata
    tags:
      component: inside
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
      "doStuffFromInsideVPC"
  processUserResult:
    handler: functions.processUserResult
    tags:
      component: inside
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
        "doStuffFromInsideVPC"
  updateGameAsDoesNotExist:
    handler: functions.updateGameAsDoesNotExist
    tags:
      component: inside
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
      "doStuffFromInsideVPC"
  updateBGGTop50:
    handler: functions.updateBGGTop50
    tags:
      component: inside
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
      "doStuffFromInsideVPC"
  processGameResult:
    handler: functions.processGameResult
    tags:
      component: inside
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
        "doStuffFromInsideVPC"
  processCollectionRestrictToIDs:
    handler: functions.processCollectionRestrictToIDs
    tags:
      component: inside
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
        "doStuffFromInsideVPC"
  processCollectionUpdateGames:
    handler: functions.processCollectionUpdateGames
    tags:
      component: inside
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
        "doStuffFromInsideVPC"
  processCollectionCleanup:
    handler: functions.processCollectionCleanup
    tags:
      component: inside
    timeout: 60
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
        "doStuffFromInsideVPC"
  processPlayedMonthsResult:
    handler: functions.processPlayedMonths
    tags:
      component: inside
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
        "doStuffFromInsideVPC"
  processPlaysResult:
    handler: functions.processPlaysResult
    tags:
      component: inside
    timeout: 60
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
        "doStuffFromInsideVPC"
  updateUrlAsProcessed:
    handler: functions.updateUrlAsProcessed
    tags:
      component: inside
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
        "doStuffFromInsideVPC"
  updateUrlAsUnprocessed:
    handler: functions.updateUrlAsUnprocessed
    tags:
      component: inside
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
        "doStuffFromInsideVPC"
  updateUrlAsTryTomorrow:
    handler: functions.updateUrlAsTryTomorrow
    tags:
      component: inside
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
        "doStuffFromInsideVPC"
  updateRankings:
    handler: functions.updateRankings
    tags:
      component: inside
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
        "doStuffFromInsideVPC"
    events:
      - schedule:
          name: updateRankings
          description: every day, calculate normalised ranking and ext top 100
          rate: rate(24 hours)
          enabled: true
          input:
            stageParams:
              stage: dev
  getToProcessList:
    handler: functions.getToProcessList
    tags:
      component: inside
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
      "doStuffFromInsideVPC"
  logError:
    handler: functions.logError
    tags:
      component: inside
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    role:
      "doStuffFromInsideVPC"

resources:
  Resources:
    doStuffFromInsideVPC:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: doStuffFromInsideVPCPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      - - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                  Resource: "*"
