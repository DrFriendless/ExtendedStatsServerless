openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/DrFriendless/ExtendedStatsServerless/1.0.0

info:
  description: |
    This is the API for Extended Stats Serverless.
    In this document the term user can refer to a user of Extended Stats or a user of boardgamegeek.com.
    The term geek refers exclusively to a user of boardgamegeek.com who is in the list of BGG users for Extended Stats.
    A user of Extended Stats is a person who has created an account on drfriendless.com, and may or may not be a user
    of boardgamegeek.com.

    Notes on v1.0.0: in writing this specification, quite a few things have confused me and there are things I would
    like to change. I will be making breaking changes to the API until version 2.0.0, at which point I will adopt semver.
    Luckily at this point there are not many users other than me who will be inconvenienced.
  version: "1.0.0"
  title: Extended Stats API
  contact:
    email: friendless.farrell@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
  - name: apikey
    description: You need an API key to invoke this API
  - name: nokey
    description: You do not need an API key to invoke this API
  - name: authenticated
    description: You must send authentication as a logged-in user.
  - name: dontuse
    description: Don't use this API. It's either incomplete or is going to change or be deleted.

paths:
  /authenticate:
    get:
      tags:
        - developers nokey authenticated
      summary: retrieves login data for a user
      operationId: authenticate
      description: |
        Send authentication information retrieved from auth0 to receive personal user data.
        If the authentication information does not correspond to an existing user, a new user will be created.
      responses:
        '200':
          description: user data returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserData'
  /faqcount:
    post:
      tags:
        - apikey admin
      summary: increment FAQ counts and retrieve
      operationId: incFAQCount
      description: |
        The FAQ component on the front page is meant to be a bit of a joke in that I keep stats of how many times
        each question is accessed, because this is a stats site. This API call optionally increments some counts
        and returns the current values.
      requestBody:
        description: the number of views of each FAQ question to record - first value is question 1 etc.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
      responses:
        '200':
          description: counts incremented
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FAQCount'
  /findgeeks:
    get:
      tags:
        - developer nokey
      summary: find geeks matching a prefix
      operationId: findgeeks
      description: |
        Used for autocompleting geek names. Given what the user has typed in, return some BGG user names which might be what they want.
      responses:
        '200':
          description: geeks returned
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - blueatheart
                  - bluebehir
                  - BlueDane
                  - bluefroggirl
                  - BlueSwan
  /news:
    get:
      tags:
        - developers apikey
      summary: get the latest news
      operationId: getNews
      description: |
        The news is set of dated messages from DrFriendless about progress on the site. It is used to alert people to new features and to show
        them that things actually are happening.
      responses:
        '200':
          description: news items returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewsItem'
  /personal:
    get:
      tags:
        - developers nokey authenticated
      summary: retrieves all of the data stored for a user
      operationId: personal
      description: |
        This call is designed not so much for the operation of the site, but more to give the user access to data stored
        about them for purposes of GDPR and other sorts of disclosure.
      responses:
        '200':
          description: personal data returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalData'
  /plays:
    post:
      tags:
        - developer apikey
      summary: get plays data
      operationId: plays
      description: |
        Given a query object, retrieve plays data for some geeks.
      requestBody:
        description: a structured query describing the data being asked for
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaysQuery'
      responses:
        '200':
          description: plays data returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiGeekPlays'
  /query:
    post:
      tags:
        - developer apikey
      summary: get selected game data
      operationId: query
      description: Given a selector and other query data, return a list of matching games.
      requestBody:
        description: a structured query describing the data being asked for
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeekGameQuery'
      responses:
        '200':
          description: game data returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
  /rankings:
    get:
      tags:
        - developer apikey
      summary: get ranked games data
      operationId: getRankingsGET
      description: |
        This API powers the rankings table.
      responses:
        '200':
          description: ranked games returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RankingTableRow'
    post:
      tags:
        - developer apikey dontuse
      summary: get ranked games data
      operationId: getRankingsPOST
      description: |
        Return ranked games data. This API is not yet in use. It is reserved for when I need a query object to specify
        which games are to be returned and how they are to be ranked.
      responses:
        '200':
          description: ranked games returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RankingTableRow'
  /summary:
    get:
      tags:
        - developer apikey
      summary: get summary data for a geek
      operationId: getGeekSummary
      parameters:
        - in: query
          name: geek
          schema:
            type: string
          required: true
          description: the geek to retrieve data for
          example: Friendless
      responses:
        '200':
          description: geek summary data returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeekSummary'
  /systemStats:
    get:
      tags:
        - admin apikey
      summary: get system stats
      operationId: adminGatherSystemStats
      description: |
        Return stats about the performance of the system.
        This is currently not restricted to admins, but will possibly become so in the future.
        In any case it's boring stuff.
      responses:
        '200':
          description: stats returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStats'
  /update:
    post:
      tags:
        - developers nokey authenticated
      summary: update user data
      operationId: update
      description: Save user config after it has been modified by the user.
      requestBody:
          description: the new user config
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConfig'
      responses:
        '200':
          description: user data saved
  /users:
    get:
      tags:
        - developers apikey
      summary: get list of all users
      operationId: getUserList
      description: Get the list of BGG user names for all users in Extended Stats. This is not much use.
      responses:
        '200':
          description: user names returned
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example: '["Friendless", "melissa", "karlsen"]'
  /wartable:
    get:
      tags:
        - developers apikey
      summary: get data for the war table
      operationId: getWarTableGET
      description: Get the list of war table rows for all geeks.
      responses:
        '200':
          description: war table data returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WarTableRow'
              example:
                geek: 1
                geekName: 'Friendless'
                totalPlays: 10234
                distinctGames: 1312
                top50: 40
                sdj: 23
                owned: 298
                want: 4
                wish: 7
                trade: 26
                prevOwned: 732
                friendless: 1
                cfm: 3.78
                utilisation: 0.63
                tens: 18
                zeros: 42
                ext100: 56
                hindex: 17
                preordered: 0
    post:
      tags:
        - developers apikey dontuse
      summary: DEPRECATED get data for the war table
      operationId: getWarTablePOST
      description: Get the list of war table rows for all geeks. This method will be removed.
      responses:
        '200':
          description: war table data returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WarTableRow'

components: 
  schemas: 
    BuddySet:
      type: object
      required:
        - name
        - buddies
      properties:
        name:
          type: string
          example: 'gaming group'
          description: the name of the buddy set as specified by the user
        buddies:
          type: array
          description: BGG user names of the users in the set
          items:
            type: string
          example:
            - 'Friendless'
            - 'jmdsplotter'
            - 'tallboy'
    Collection:
      type: object
      required:
        - collection
        - games
      properties:
        collection:
          type: array
          items:
            $ref: '#/components/schemas/GeekGame'
        games:
          type: array
          items:
            $ref: '#/components/schemas/GameData'
        metadata:
          $ref: '#/components/schemas/SelectorMetadataSet'
        extra:
          type: array
          items:
            type: integer
        plays:
          type: array
          items:
            $ref: '#/components/schemas/GamePlaysOrMonthlyPlays'
        lastYearPlays:
          type: array
          items:
            $ref: '#/components/schemas/GamePlays'
    Decoded:
      type: object
      required:
        - nickname
        - sub
      properties:
        nickname:
          type: string
          example: friendless
          description: the user's login name from auth0
        sub:
          type: string
          example: 'ABC123'
          description: the user's unique identity from auth0
    FAQCount:
      type: object
      description: The number of views of this question in the previous corresponding time periods.
      required:
        - day
        - week
        - month
        - year
        - ever
      properties:
        day:
          type: integer
        week:
          type: integer
        month:
          type: integer
        year:
          type: integer
        ever:
          type: integer
      example:
        day: 1
        week: 2
        month: 3
        year: 4
        ever: 5
    GameData:
      type: object
      required:
        - bggid
        - name
        - bggRating
        - bggRanking
        - yearPublished
        - minPlayers
        - maxPlayers
        - playTime
        - subdomain
        - weight
        - isExpansion
      properties:
        bggid:
          type: integer
        name:
          type: string
        bggRating:
          type: number
        bggRanking:
          type: integer
        yearPublished:
          type: integer
        minPlayers:
          type: integer
        maxPlayers:
          type: integer
        playTime:
          type: integer
        subdomain:
          type: string
        weight:
          type: number
        isExpansion:
          type: boolean
    GamePlays:
      type: object
      required:
        - game
        - plays
        - expansion
        - distinctYears
        - distinctMonths
      properties:
        game:
          type: integer
        plays:
          type: integer
        expansion:
          type: boolean
        firstPlay:
          type: integer
          description: date of first play of this game
          example: 20130902
        lastPlay:
          type: integer
          description: date of last play of this game
          example: 20180112
        distinctYears:
          type: integer
        distinctMonths:
          type: integer
    GamePlaysOrMonthlyPlays:
      type: object
      description: There is no such type. The type will be GamePlays or MonthlyPlays depending on context. This will change.
    GeekGame:
      type: object
      description: relationship between a geek and a game
      required:
        - bggid
        - rating
        - owned
        - wantToBuy
        - wantToPlay
        - preordered
        - prevOwned
      properties:
        bggid:
          type: integer
          description: BGG ID for the game
        rating:
          type: number
          description: the geek's rating for the game
        owned:
          type: boolean
        wantToBuy:
          type: boolean
        wantToPlay:
          type: boolean
        preordered:
          type: boolean
        prevOwned:
          type: boolean
    GeekGameQuery:
      type: object
      required:
        - geek
        - query
        - format
        - vars
      properties:
        geek:
          type: string
          description: the primary geek for this collection, known as "ME"
        geeks:
          type: array
          description: other geeks involved in this query
          items:
            type: string
        query:
          type: string
          description: the selector for this query
        extra:
          type: string
        format:
          type: string
          enum: [Collection, CollectionWithPlays, CollectionWithMonthlyPlays]
          description: The JavaScript interface for the data to be returned. Use this to specify what data you want.
        vars:
          type: object
          description: other parameters to the selector (not yet used)
          properties:
            THEM:
              type: string
            YEAR:
              type: integer
            RATING:
              type: integer
            MONTH:
              type: integer
    GeekSummary:
      type: object
      required:
        - rated
        - average
        - monthsPlayed
      properties:
        warData:
          $ref: '#/components/schemas/WarTableRow'
        rated:
          type: integer
        average:
          type: number
        monthsPlayed:
          type: integer
        error:
          type: string
        geekId:
          type: integer
    MonthlyPlays:
      type: object
      required:
        - year
        - month
        - game
        - expansion
        - quantity
      properties:
        year:
          type: integer
          description: the year of the month that the data is for
        month:
          type: integer
          description: the month that the data is for
        game:
          type: integer
          description: the BGG ID for the game
        expansion:
          type: boolean
        quantity:
          type: integer
          description: how many times the game was played
    MultiGeekPlays:
      type: object
      required:
        - geeks
        - plays
      properties:
        geeks:
          description: the geeks who were asked for and actually found
          type: array
          items:
            type: string
        plays:
          description: Keys are geek names.
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/PlaysWithDate'
        collection:
          description: relevant geekgames
          type: array
          items:
            $ref: '#/components/schemas/GeekGame'
        games:
          description: data for games in this result
          type: array
          items:
            $ref: '#/components/schemas/GameData'
        metadata:
          $ref: '#/components/schemas/SelectorMetadataSet'
        extra:
          type: array
          items:
            type: integer
    NewsItem:
      type: object
      required:
        - id
        - date
        - html
      properties:
        id:
          type: integer
          description: primary key for the news item in the database
        date:
          type: string
          description: the date the news item was added
        html:
          type: string
          description: HTML content of the news item
      example:
        id: 8
        date: '14 April 2019'
        html: 'Defined the Swagger specification version 1.0.0!'
    PersonalData:
      type: object
      properties:
        userData:
          $ref: '#/components/schemas/UserData'
        allData:
          type: object
          description: a lump of JSON data with no specified schema - it is not intended that this data be used
          example:
            name: 'Friendless'
        error:
          type: string
          description: description of what went wrong if the personal data could not be retrieved
    Plays:
      type: object
      required:
        - game
        - quantity
      properties:
        geek:
          type: string
          description: included only if there is ambiguity
        game:
          type: integer
          description: BGG ID of the game that was played
        expansions:
          type: array
          items:
            type: integer
          description: BGG IDs of any expansions that were used. May be omitted if empty.
        quantity:
          type: integer
          description: the number of plays
      example:
        geek: Friendless
        quantity: 1
        game: 42
    PlaysQuery:
      type: object
      required:
        - geek
      properties:
        geek:
          description: The sole geek data is being requested for. This may be removed in favour of using geeks.
          type: string
        geeks:
          description: The geeks that data is being requested for.
          type: array
          items:
            type: string
        year:
          description: If present, restrict to plays from this year.
          type: integer
        month:
          description: If present, restrict to plays from this month.
          type: integer
        date:
          description: If present, restrict to plays from this date.
          type: integer
        filter:
          description: As yet unused. Will apply further conditions on the search.
          type: string
    PlaysWithDate:
      type: object
      required:
        - game
        - quantity
        - year
        - month
        - date
      properties:
        geek:
          description: The geek who played the play. Will be populated if required to disambiguate.
          type: string
        game:
          description: BGG ID of the base game that was played.
          type: integer
        expansions:
          description: BGG IDs of expansions that were used.
          type: array
          items:
            type: integer
        quantity:
          description: How many times the game was played.
          type: integer
        year:
          description: The year in which the play took place.
          type: integer
        month:
          description: The month in which the play took place.
          type: integer
        date:
          description: The date on which the play took place.
          type: integer
    RankingTableRow:
      type: object
      required:
        - game
        - game_name
        - total_ratings
        - num_ratings
        - bgg_ranking
        - bgg_rating
        - normalised_ranking
        - total_plays
        - ranking
      properties:
        game:
          description: the game's BGG number
          type: integer
        game_name:
          description: the game's name
          type: string
        total_ratings:
          description: the total of ratings for this game in Extended Stats - this is the score used for the ranking value
          type: integer
        num_ratings:
          description: the number of geeks rating this game in Extended Stats
          type: integer
        bgg_ranking:
          description: a recent ranking of the game on BGG
          type: integer
        bgg_rating:
          type: number
        normalised_ranking:
          description: the game's ranking by the Extended Stats normalised method
          type: integer
        total_plays:
          type: integer
        ranking:
          description: the game's ranking by the Extended Stats method
          type: integer
    SelectorMetadata:
      type: object
      description: Metadata related to a game based on the selector that was used to select it.
      required:
        - game
      properties:
        game:
          type: integer
        colour:
          description: A colour that was assigned to this game by the selector.
          type: string
        owner:
          description: The owner of this game which caused it to be selected.
          type: string
        player:
          description: The player of this game which caused it to be selected.
          type: string
        rater:
          description: The rater of this game which caused it to be selected.
          type: string
    SelectorMetadataSet:
      type: object
      description: Keys are BGG game IDs, values are SelectorMetadata.
    SystemStats:
      type: object
      required:
        - userRows
        - gameRows
        - geekGamesRows
        - expansionRows
        - mechanics
        - categories
        - gameMechanics
        - gameCategories
        - notGames
        - fileRows
        - ggForZero
        - distinctGGOwners
        - playsRows
        - normalisedPlaysRows
      properties:
        userRows:
          type: integer
        gameRows:
          type: integer
        geekGamesRows:
          type: integer
        expansionRows:
          type: integer
        mechanics:
          type: integer
        categories:
          type: integer
        gameMechanics:
          type: integer
        gameCategories:
          type: integer
        notGames:
          type: integer
        fileRows:
          type: array
          items:
            $ref: '#/components/schemas/TypeCount'
        ggForZero:
          type: integer
        distinctGGOwners:
          type: integer
        playsRows:
          type: integer
        normalisedPlaysRows:
          type: integer
    TypeCount:
      type: object
      required:
        - type
        - existing
        - waiting
        - unprocessed
      properties:
        type:
          type: string
        existing:
          type: integer
        waiting:
          type: integer
        unprocessed:
          type: integer
    UserConfig:
      type: object
      required:
        - usernames
        - buddies
      properties:
        usernames:
          type: array
          description: the user's favourite user names on BGG
          items:
            type: string
          example:
            - Friendless
            - Scrabblette
            - harley22
        buddies:
          type: array
          description: the user's defined buddy groups
          items:
            $ref: '#/components/schemas/BuddySet'
          example:
            - name: 'Critical Mass'
              buddies:
                - 'Critical Mass'
                - 'cyberkev63'
                - 'OzVortex'
                - 'Ozgamer'
            - name: 'IWG'
              buddies:
                - 'trif'
                - 'ferrao'
                - 'Simonocles'
                - 'ozjesting'
    UserData:
      type: object
      properties:
        first:
          type: boolean
          example: false
        config:
          $ref: '#/components/schemas/UserConfig'
        jwt:
          $ref: '#/components/schemas/Decoded'
    WarTableRow:
      type: object
      description: |
        A row of the war table in the database. This table is populated to support the war table in the UI, and some of
        these values are not otherwise available.
      required:
        - geek
        - geekName
        - totalPlays
        - distinctGames
        - top50
        - sdj
        - owned
        - want
        - wish
        - trade
        - prevOwned
        - friendless
        - cfm
        - utilisation
        - tens
        - zeros
        - ext100
        - hindex
        - preordered
      properties:
        geek:
          type: integer
          description: primary key for the geek in Extended Stats
        geekName:
          type: string
          description: BGG user name for this geek.
        totalPlays:
          type: integer
        distinctGames:
          type: integer
        top50:
          type: integer
        sdj:
          type: integer
        owned:
          type: integer
        want:
          type: integer
        wish:
          type: integer
        trade:
          type: integer
        prevOwned:
          type: integer
        friendless:
          type: integer
        cfm:
          type: number
        utilisation:
          type: number
        tens:
          type: integer
        zeros:
          type: integer
        ext100:
          type: integer
        hindex:
          type: integer
        preordered:
          type: integer
