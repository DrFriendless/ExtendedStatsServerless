openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/DrFriendless/ExtendedStatsServerless/1.0.0

info:
  description: |
    This is the API for Extended Stats Serverless.
    In this document the term user can refer to a user of Extended Stats or a user of boardgamegeek.com.
    The term geek refers exclusively to a user of boardgamegeek.com who is in the list of BGG users for Extended Stats.
    A user of Extended Stats is a person who has created an account on drfriendless.com, and may or may not be a user
    of boardgamegeek.com.
  version: "1.0.0"
  title: Extended Stats API
  contact:
    email: friendless.farrell@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
  - name: apikey
    description: You need an API key to invoke this API
  - name: nokey
    description: You do not need an API key to invoke this API
  - name: authenticated
    description: You must send authentication as a logged-in user.

paths:
  /authenticate:
    get:
      tags:
        - developers nokey authenticated
      summary: retrieves login data for a user
      operationId: authenticate
      description: |
        Send authentication information retrieved from auth0 to receive personal user data.
        If the authentication information does not correspond to an existing user, a new user will be created.
      responses:
        '200':
          description: user data returned
          content:
            application/json:
              schema:
                $ref: '#/definitions/UserData'
  /collectionWithPlays:
    get:
    post:
  /faqcount:
    post:
      tags:
        - apikey admin
      summary: increment FAQ counts and retrieve
      operationId: incFAQCount
      description: |
        The FAQ component on the front page is meant to be a bit of a joke in that I keep stats of how many times
        each question is accessed, because this is a stats site. This API call optionally increments some counts
        and returns the current values.
      requestBody:
        description: the number of views of each FAQ question to record - first value is question 1 etc.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
      responses:
        '200':
          description: counts incremented
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/definitions/FAQCount'
  /findgeeks:
    get:
      tags:
        - developer nokey
      summary: find geeks matching a prefix
      operationId: findgeeks
      description: |
        Used for autocompleting geek names. Given what the user has typed in, return some BGG user names which might be what they want.
      responses:
        '200':
          description: geeks returned
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - blueatheart
                  - bluebehir
                  - BlueDane
                  - bluefroggirl
                  - BlueSwan
  /news:
    get:
      tags:
        - developers apikey
      summary: get the latest news
      operationId: getNews
      description: |
        The news is set of dated messages from DrFriendless about progress on the site. It is used to alert people to new features and to show
        them that things actually are happening.
      responses:
        '200':
          description: news items returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: NewsItem
  /personal:
    get:
      tags:
        - developers nokey authenticated
      summary: retrieves all of the data stored for a user
      operationId: personal
      description: |
        This call is designed not so much for the operation of the site, but more to give the user access to data stored
        about them for purposes of GDPR and other sorts of disclosure.
      responses:
        '200':
          description: personal data returned
          content:
            application/json:
              schema:
                $ref: '#/definitions/PersonalData'

  /plays:
    post:
  /query:
    post:
  /rankings:
    get:
    post:
  /summary:
    get:
      tags:
        - developer apikey
      summary: get summary data for a geek
      parameters:
        - in: query
          name: geek
          schema:
            type: string
          required: true
          description: the geek to retrieve data for
          example: Friendless
      responses:
        '200':
          description: geek summary data returned
          content:
            application/json:
              schema:
                $ref: '#/definitions/GeekSummary'
  /systemStats:
    get:
      tags:
        - admin apikey
      summary: get system stats
      description: |
        Return stats about the performance of the system.
        This is currently not restricted to admins, but will possibly become so in the future.
        In any case it's boring stuff.
      responses:
        '200':
          description: stats returned
          content:
            application/json:
              schema:
                $ref: '#/definitions/SystemStats'
  /update:
    post:
      tags:
        - developers nokey authenticated
      summary: update user data
      operationId: update
      description: save user data after it has been modified by the user.
      requestBody:
          description: the new values for the user data
          required: true
          content:
            application/json:
              schema:
                $ref: '#/definitions/UserData'
      responses:
        '200':
          description: user data saved
  /users:
    get:
      tags:
        - developers apikey
      summary: get list of all users
      description: Get the list of BGG user names for all users in Extended Stats. This is not much use.
      responses:
        '200':
          description: user names returned
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example: '["Friendless", "melissa", "karlsen"]'
  /wartable:
    get:
      tags:
        - developers apikey
      summary: get data for the war table
      description: Get the list of war table rows for all geeks.
      responses:
        '200':
          description: war table data returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/definitions/WarTableRow'
              example:
                geek: 1
                geekName: 'Friendless'
                totalPlays: 10234
                distinctGames: 1312
                top50: 40
                sdj: 23
                owned: 298
                want: 4
                wish: 7
                trade: 26
                prevOwned: 732
                friendless: 1
                cfm: 3.78
                utilisation: 0.63
                tens: 18
                zeros: 42
                ext100: 56
                hindex: 17
                preordered: 0
    post:
      tags:
        - developers apikey
      summary: DEPRECATED get data for the war table
      description: Get the list of war table rows for all geeks. This method will be removed.
      responses:
        '200':
          description: war table data returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/definitions/WarTableRow'

definitions:
  BuddySet:
    type: object
    required:
      - name
      - buddies
    properties:
      name:
        type: string
        example: 'gaming group'
        description: the name of the buddy set as specified by the user
      buddies:
        type: array
        description: BGG user names of the users in the set
        items:
          type: string
        example:
          - 'Friendless'
          - 'jmdsplotter'
          - 'tallboy'
  Decoded:
    type: object
    required:
      - nickname
      - sub
    properties:
      nickname:
        type: string
        example: friendless
        description: the user's login name from auth0
      sub:
        type: string
        example: 'ABC123'
        description: the user's unique identity from auth0
  FAQCount:
    type: object
    description: The number of views of this question in the previous corresponding time periods.
    required:
      - day
      - week
      - month
      - year
      - ever
    properties:
      day:
        type: integer
      week:
        type: integer
      month:
        type: integer
      year:
        type: integer
      ever:
        type: integer
    example:
      day: 1
      week: 2
      month: 3
      year: 4
      ever: 5
  GeekSummary:
    type: object
    required:
      - rated
      - average
      - monthsPlayed
    properties:
      warData:
        $ref: '#/definitions/WarTableRow'
      rated:
        type: integer
      average:
        type: number
      monthsPlayed:
        type: integer
      error:
        type: string
      geekId:
        type: integer
  NewsItem:
    type: object
    required:
      - id
      - date
      - html
    properties:
      id:
        type: integer
        description: primary key for the news item in the database
      date:
        type: string
        description: the date the news item was added
      html:
        type: string
        description: HTML content of the news item
  PersonalData:
    type: object
    properties:
      userData:
        $ref: '#/definitions/UserData'
      allData:
        type: object
        description: a lump of JSON data with no specified schema
        example:
          name: 'Friendless'
      error:
        type: string
        description: description of what went wrong if the personal data could not be retrieved
  SystemStats:
    type: object
    required:
      - userRows
      - gameRows
      - geekGamesRows
      - expansionRows
      - mechanics
      - categories
      - gameMechanics
      - gameCategories
      - notGames
      - fileRows
      - ggForZero
      - distinctGGOwners
      - playsRows
      - normalisedPlaysRows
    properties:
      userRows:
        type: integer
      gameRows:
        type: integer
      geekGamesRows:
        type: integer
      expansionRows:
        type: integer
      mechanics:
        type: integer
      categories:
        type: integer
      gameMechanics:
        type: integer
      gameCategories:
        type: integer
      notGames:
        type: integer
      fileRows:
        type: array
        items:
          $ref: '#/definitions/TypeCount'
      ggForZero:
        type: integer
      distinctGGOwners:
        type: integer
      playsRows:
        type: integer
      normalisedPlaysRows:
        type: integer
  TypeCount:
    type: object
    required:
      - type
      - existing
      - waiting
      - unprocessed
    properties:
      type:
        type: string
      existing:
        type: integer
      waiting:
        type: integer
      unprocessed:
        type: integer
  UserConfig:
    type: object
    required:
      - usernames
      - buddies
    properties:
      usernames:
        type: array
        description: the user's favourite user names on BGG
        items:
          type: string
        example:
          - Friendless
          - Scrabblette
          - harley22
      buddies:
        type: array
        description: the user's defined buddy groups
        items:
          $ref: '#/definitions/BuddySet'
        example:
          - name: 'Critical Mass'
            buddies:
              - 'Critical Mass'
              - 'cyberkev63'
              - 'OzVortex'
              - 'Ozgamer'
          - name: 'IWG'
            buddies:
              - 'trif'
              - 'ferrao'
              - 'Simonocles'
              - 'ozjesting'
  UserData:
    type: object
    properties:
      first:
        type: boolean
        example: false
      config:
        $ref: '#/definitions/UserConfig'
      jwt:
        $ref: '#/definitions/Decoded'
  WarTableRow:
    type: object
    description: |
      A row of the war table in the database. This table is populated to support the war table in the UI, and some of
      these values are not otherwise available.
    required:
      - geek
      - geekName
      - totalPlays
      - distinctGames
      - top50
      - sdj
      - owned
      - want
      - wish
      - trade
      - prevOwned
      - friendless
      - cfm
      - utilisation
      - tens
      - zeros
      - ext100
      - hindex
      - preordered
    properties:
      geek:
        type: integer
        description: primary key for the geek in Extended Stats
      geekName:
        type: string
        description: BGG user name for this geek.
      totalPlays:
        type: integer
      distinctGames:
        type: integer
      top50:
        type: integer
      sdj:
        type: integer
      owned:
        type: integer
      want:
        type: integer
      wish:
        type: integer
      trade:
        type: integer
      prevOwned:
        type: integer
      friendless:
        type: integer
      cfm:
        type: number
      utilisation:
        type: number
      tens:
        type: integer
      zeros:
        type: integer
      ext100:
        type: integer
      hindex:
        type: integer
      preordered:
        type: integer
