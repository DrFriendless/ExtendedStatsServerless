service: api

plugins:
  - serverless-plugin-typescript
  - serverless-domain-manager

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  timeout: 30
  memorySize: 128
  region: ap-southeast-2
  vpc:
    securityGroupIds:
      - sg-4d4b742b
    subnetIds:
      - subnet-44646e1d
      - subnet-a865decf
      - subnet-f565d0bc
  apiKeys:
    - Demo
    - DrFriendless

custom:
  secret: ${file(../secrets.json)}
  database: ${file(../database.json)}
  customDomain:
    domainName: api.drfriendless.com
    basePath: 'v1'
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateName: "api.drfriendless.com"

functions:
  authorize:
    handler: auth.authenticate
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    events:
      - http:
          path: authenticate
          method: get
          cors: true
          integration: lambda
          private: false
  personal:
    handler: auth.personal
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    events:
      - http:
          path: personal
          method: get
          cors: true
          integration: lambda
          private: false
  update:
    handler: auth.update
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    events:
      - http:
          path: update
          method: post
          cors: true
          integration: lambda
          private: false
  adminGatherSystemStats:
    handler: functions.adminGatherSystemStats
    tags:
      component: api
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    events:
      - http:
          path: systemStats
          method: get
          cors: true
          integration: lambda
          private: true
    role:
        "doStuffFromInsideVPC"
  getNews:
    handler: functions.getNews
    tags:
      component: api
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    events:
      - http:
          path: news
          method: get
          cors: true
          integration: lambda
          private: true
    role:
        "doStuffFromInsideVPC"
  getUserList:
    handler: functions.getUserList
    tags:
      component: api
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    events:
      - http:
          path: users
          method: get
          cors: true
          integration: lambda
          private: true
    role:
        "doStuffFromInsideVPC"
  query:
    handler: functions.query
    tags:
      component: api
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    events:
      - http:
          path: query
          method: post
          cors: true
          integration: lambda
          private: true
    role:
        "doStuffFromInsideVPC"
  plays:
    handler: functions.plays
    tags:
      component: api
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    events:
      - http:
          path: plays
          method: post
          cors: true
          integration: lambda
          private: true
    role:
        "doStuffFromInsideVPC"
  getGeekSummary:
    handler: functions.getGeekSummary
    tags:
      component: api
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    events:
      - http:
          path: summary
          method: get
          cors: true
          integration: lambda
          private: true
    role:
        "doStuffFromInsideVPC"
  incFAQCount:
    handler: functions.incFAQCount
    tags:
      component: api
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    events:
      - http:
          path: faqcount
          method: post
          cors: true
          integration: lambda
          private: true
    role:
        "doStuffFromInsideVPC"
  getCollectionWithPlays:
    handler: functions.getCollectionWithPlays
    tags:
      component: api
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    events:
      - http:
          path: collectionWithPlays
          method: post
          cors: true
          integration: lambda
          private: true
      - http:
          path: collectionWithPlays
          method: get
          cors: true
          integration: lambda
          private: true
    role:
        "doStuffFromInsideVPC"
  getRankings:
    handler: functions.getRankings
    tags:
      component: api
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    events:
      - http:
          path: rankings
          method: post
          cors: true
          integration: lambda
          private: true
      - http:
          path: rankings
          method: get
          cors: true
          integration: lambda
          private: true
    role:
        "doStuffFromInsideVPC"
  getWarTable:
    handler: functions.getWarTable
    tags:
      component: api
    environment:
      mysqlHost: ${self:custom.database.mysqlHost}
      mysqlUsername: ${self:custom.database.mysqlUsername}
      mysqlPassword: ${self:custom.database.mysqlPassword}
      mysqlDatabase: ${self:custom.database.mysqlDatabase}
    events:
      - http:
          path: wartable
          method: post
          cors: true
          integration: lambda
          private: true
      - http:
          path: wartable
          method: get
          cors: true
          integration: lambda
          private: true
    role:
        "doStuffFromInsideVPC"

resources:
  Resources:
    doStuffFromInsideVPC:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: doStuffFromInsideVPCPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      - - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                  Resource: "*"
